version: 2.1

commands:
  clone_branch_or_pr:
    description: "Checkout source code from corresponding pull request or branch. Submodules are not taken into account."
    steps:
      - run:
          name: "checkout sources"
          command: |
            CLONE_URL="https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
            echo "CLONE_URL: ${CLONE_URL}"
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              PR_NUMBER=$(basename ${CIRCLE_PULL_REQUEST})
            else
              PR_NUMBER="nopr"
            fi
            if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" -eq "$PR_NUMBER" ] 2>/dev/null; then
              echo "This is pull request: ${PR_NUMBER}"
              git clone ${CLONE_URL}
              cd ${CIRCLE_PROJECT_REPONAME}
              BRANCH=pr${PR_NUMBER}
              git fetch origin \"pull/${PR_NUMBER}/head:${BRANCH}\"
              cd -
            else
              echo "This is simple branch: ${CIRCLE_BRANCH}"
              git clone -b ${CIRCLE_BRANCH} --single-branch ${CLONE_URL}
            fi
            SOURCE_DIR=$(pwd)/${CIRCLE_PROJECT_REPONAME}

jobs:
  ubuntu_x86_64:
    machine:
      image: ubuntu-2004:202201-01
    resource_class: large
    steps:
      - run: printenv
      - run:
          name: Login to Dockerhub
          command: |
            echo "$DOCKERHUB_PULL_TOKEN" | docker login --username $DOCKERHUB_LOGIN --password-stdin
      - clone_branch_or_pr
      - run:
          name: Create directories for Debug and Release builds
          command: |
            mkdir -p build/amd64/Debug
            mkdir -p build/amd64/Release
            BUILD_DIR=$(pwd)/build/amd64
      - run:
          name: Set environment variables
          command: |
            . ${SOURCE_DIR}/scripts/set-environment.sh -cc /usr/bin/gcc-12 -cxx /usr/bin/g++-12 -cv 12 -r /usr/bin/ranlib -s ${SOURCE_DIR} -b ${BUILD_DIR} -a amd64 -v
      - run:
          name: Run docker container for amd64
          command: |
            docker compose -f ${SOURCE_DIR}/scripts/amd64/compose.yaml up -d
      - run:
          name: Configure, build and test ninja-clang-Debug
          command: |
            docker exec -it build-test-host bash -c "cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=$SOURCE_DIR/deps_content/cmake-toolchains/gnu.cmake -DSUPPORTED_CONFIGURATIONS=\"Debug Release\" -DCMAKE_BUILD_TYPE=\"Debug\" -S ${SOURCE_DIR} -B ${BUILD_DIR}/Debug"
            docker exec -it build-test-host -c "cd ${BUILD_DIR}/Debug; cmake --build . --config Debug"
            docker exec -it build-test-host -c "cd ${BUILD_DIR}/Debug; ctest -I ,,1 -C Debug --output-on-failure"
      - run:
          name: Configure, build and test ninja-clang-Release
          command: |
            docker exec -it build-test-host bash -c "cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=$SOURCE_DIR/deps_content/cmake-toolchains/gnu.cmake -DSUPPORTED_CONFIGURATIONS=\"Debug Release\" -DCMAKE_BUILD_TYPE=\"Release\" -S ${SOURCE_DIR} -B ${BUILD_DIR}/Release"
            docker exec -it build-test-host bash -c "cd ${BUILD_DIR}/Release; cmake --build . --config Release"
            docker exec -it build-test-host bash -c "cd ${BUILD_DIR}/Release; ctest -I ,,1 -C Release --output-on-failure"
  ubuntu_s390x:
    machine:
      image: ubuntu-2004:202201-01
    resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
    steps:
      - run: printenv
      - run:
          name: Login to Dockerhub
          command: |
            echo "$DOCKERHUB_PULL_TOKEN" | docker login --username $DOCKERHUB_LOGIN --password-stdin
      - run:
          name: Enable run containers with different architectures
          command: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - clone_branch_or_pr
      - run:
          name: Create directories for Debug and Release builds
          command: |
            mkdir -p build/s390x/Debug
            mkdir -p build/s390x/Release
            BUILD_DIR=$(pwd)/build/s390x
      - run:
          name: Set environment variables
          command: |
            . ${SOURCE_DIR}/scripts/set-environment.sh -s ${SOURCE_DIR} -b ${BUILD_DIR} -v
      - run:
          name: Run docker container for amd64
          command: |
            docker compose -f ${SOURCE_DIR}/scripts/s390x/compose.yaml up -d
      - run:
          name: Configure, build and test ninja-gnu-Debug
          command: |
            SRC_DIR="/home/projects/${CIRCLE_PROJECT_REPONAME}"
            BUILD_DIR="${SRC_DIR}/build/Ninja/gnu/Debug"
            docker exec -it build-host bash -c "cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${SOURCE_DIR}/deps_content/cmake-toolchains/gnu.cmake -DSUPPORTED_CONFIGURATIONS=\"Debug Release\" -DCMAKE_BUILD_TYPE=\"Debug\" -S ${SOURCE_DIR} -B ${BUILD_DIR}/Debug"
            docker exec -it build-host bash -c "cd ${BUILD_DIR}/Debug; cmake --build . --config Debug"
            cd $BUILD_DIR/Debug
            ctest -I ,,1 -C Debug --output-on-failure
      - run:
          name: Configure, build and test ninja-gnu-Release
          command: |
            SRC_DIR="/home/projects/${CIRCLE_PROJECT_REPONAME}"
            BUILD_DIR="${SRC_DIR}/build/Ninja/gnu/Release"
            docker exec -it build-host bash -c "cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${SOURCE_DIR}/deps_content/cmake-toolchains/gnu.cmake -DSUPPORTED_CONFIGURATIONS=\"Debug Release\" -DCMAKE_BUILD_TYPE=\"Release\" -S ${SOURCE_DIR} -B ${BUILD_DIR}/Release"
            docker exec -it build-host bash -c "cd ${BUILD_DIR}/Release; cmake --build . --config Release"
            cd $BUILD_DIR/Release
            ctest -I ,,1 -C Release --output-on-failure

workflows:
  build_and_test:
    jobs:
      - ubuntu_x86_64:
          context:
            - roko
          filters:
            branches:
              only:
                - develop
      - ubuntu_s390x:
          context:
            - roko
          filters:
            branches:
              only:
                - develop
